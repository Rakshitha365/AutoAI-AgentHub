"""
AutoAI Generated Prediction API

This API was automatically generated by the AutoAI Agent Framework.
Model: Ridge
Task: regression

Author: AutoAI Agent Framework
Version: 1.0
"""

from flask import Flask, request, jsonify
import pandas as pd
import joblib
import numpy as np
from datetime import datetime

app = Flask(__name__)

# Load model and preprocessor
try:
    model = joblib.load("artifacts\models\best_model_20251015110313.joblib")
    preprocessor = joblib.load("artifacts\models\preprocessor_20251015110313.joblib")
    print("✅ Model and preprocessor loaded successfully")
except Exception as e:
    print(f"❌ Error loading model: {e}")
    exit(1)

@app.route('/')
def home():
    return jsonify({
        "message": "AutoAI Prediction API",
        "model_type": "Ridge",
        "task_type": "regression",
        "features": ['feature_0', 'feature_3', 'feature_1_A', 'feature_1_B', 'feature_1_C', 'feature_2_0', 'feature_2_1', 'feature_4_A', 'feature_4_B', 'feature_4_C'],
        "timestamp": "2025-10-15T11:03:13.142488"
    })

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # Get input data
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "No input data provided"}), 400
        
        # Create DataFrame from input
        input_df = pd.DataFrame([data])
        
        # Ensure all features are present
        for feature in ['feature_0', 'feature_3', 'feature_1_A', 'feature_1_B', 'feature_1_C', 'feature_2_0', 'feature_2_1', 'feature_4_A', 'feature_4_B', 'feature_4_C']:
            if feature not in input_df.columns:
                input_df[feature] = 0.0
        
        # Reorder columns
        input_df = input_df[['feature_0', 'feature_3', 'feature_1_A', 'feature_1_B', 'feature_1_C', 'feature_2_0', 'feature_2_1', 'feature_4_A', 'feature_4_B', 'feature_4_C']]
        
        # Transform and predict
        transformed_input = preprocessor.transform(input_df)
        prediction = model.predict(transformed_input)
        
        # Prepare response
        response = {
            "prediction": prediction[0],
            "timestamp": datetime.now().isoformat()
        }
        
        # Add probabilities for classification
        if "regression" == "classification" and hasattr(model, 'predict_proba'):
            probabilities = model.predict_proba(transformed_input)
            response["probabilities"] = dict(zip(model.classes_, probabilities[0]))
        
        return jsonify(response)
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/health')
def health():
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})

if __name__ == '__main__':
    print("🚀 Starting AutoAI Prediction API...")
    print(f"📊 Model: Ridge")
    print(f"🎯 Task: regression")
    print("🌐 API will be available at: http://localhost:5000")
    app.run(host='0.0.0.0', port=5000, debug=True)
